AC_INIT([zeitgeist], [0.9.15], [dev@lists.zeitgeist-project.com], [zeitgeist])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS(config.h)
AM_INIT_AUTOMAKE([1.11 tar-ustar dist-xz no-dist-gzip -Wno-portability])
AM_MAINTAINER_MODE([enable])

AM_PATH_PYTHON

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CXX
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

AM_PROG_VALAC([0.22.0])
AS_IF([test -z "$VALAC"], [AC_MSG_ERROR(["No Vala compiler found."])])

AM_SILENT_RULES([yes])

AH_TEMPLATE([GETTEXT_PACKAGE], [Package name for gettext])
GETTEXT_PACKAGE=zeitgeist
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE")
AC_SUBST(GETTEXT_PACKAGE)
AM_GLIB_GNU_GETTEXT
IT_PROG_INTLTOOL([0.35.0])

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

GLIB_REQUIRED=2.26.0
SQLITE_REQUIRED=3.7.11
VALADOC_REQUIRED=0.2

ZEITGEIST_REQUIRED="glib-2.0 >= $GLIB_REQUIRED
                    gobject-2.0 >= $GLIB_REQUIRED
                    gmodule-2.0 >= $GLIB_REQUIRED
                    gio-unix-2.0 >= $GLIB_REQUIRED
                    sqlite3 >= $SQLITE_REQUIRED"

PKG_CHECK_MODULES(ZEITGEIST, [$ZEITGEIST_REQUIRED])

AC_CONFIG_FILES([
	Makefile
	src/Makefile
	libzeitgeist/Makefile
	libzeitgeist/zeitgeist-2.0.pc
	datahub/Makefile
	extensions/Makefile
	extensions/fts++/Makefile
	extensions/fts++/test/Makefile
	data/Makefile
	data/ontology/Makefile
	python/Makefile
	test/Makefile
	test/dbus/Makefile
	test/direct/Makefile
	test/c/Makefile
	test/data/Makefile
	examples/Makefile
	examples/c/Makefile
	examples/vala/Makefile
	doc/Makefile
	doc/libzeitgeist/Makefile
	po/Makefile.in
])

#################################################
# Dee-ICU check
#################################################
DEE_ICU_REQUIRED=1.0.2

have_dee_icu=no
AC_ARG_WITH([dee-icu],
            AS_HELP_STRING([--with-dee-icu[=@<:@no/auto/yes@:>@]],
                           [Build the FTS extension with dee-icu]),
            [],
            [with_dee_icu="auto"])

AS_IF([test "$with_dee_icu" = "yes"], [have_dee_icu=yes],
      [test "$with_dee_icu" = "auto"], [
        PKG_CHECK_EXISTS([dee-icu-1.0 >= $DEE_ICU_REQUIRED],
                         [have_dee_icu=yes])
      ])

AS_IF([test "$have_dee_icu" = "yes"], [
  PKG_CHECK_MODULES([DEE_ICU], [dee-icu-1.0 >= $DEE_ICU_REQUIRED])
  AC_DEFINE([HAVE_DEE_ICU], [1], [Have dee-icu])
])

AM_CONDITIONAL([HAVE_DEE_ICU], [test "$have_dee_icu" = "yes"])

#################################################
# DBus service
#################################################

AC_ARG_WITH([session_bus_services_dir],
            AS_HELP_STRING([--with-session-bus-services-dir],
                           [Path to DBus services directory]))

AS_IF([test -z "$with_session_bus_services_dir"],
      [
        PKG_CHECK_MODULES([DBUS_MODULE], [dbus-1])
        DBUS_SERVICES_DIR=`$PKG_CONFIG --variable session_bus_services_dir dbus-1`
      ], [
        DBUS_SERVICES_DIR="$with_session_bus_services_dir"
      ])

AC_SUBST(DBUS_SERVICES_DIR)

#################################################
# Configure option: --enable-explain-queries
#################################################

AC_ARG_ENABLE([explain-queries],
              AS_HELP_STRING([--enable-explain-queries], [Enable SQL debugging]),
              [],
              [enable_explain_queries="no"])

AM_CONDITIONAL([EXPLAIN_QUERIES], [test "$enable_explain_queries" = "yes"])

#################################################
# Configure option: --enable-fts
#################################################

AC_ARG_ENABLE([fts],
              AS_HELP_STRING([--enable-fts], [Build with FTS++ extension]),
              [],
              [enable_fts="no"])

AM_CONDITIONAL([HAVE_FTS], [test "$enable_fts" = "yes"])

AS_IF([test "$enable_fts" = "yes"],
      [
        # check for Xapian
        AC_CHECK_PROG([HAVE_XAPIAN], [xapian-config], [yes], [no])
        AS_IF([test "$HAVE_XAPIAN" = "no"],
              [AC_MSG_ERROR("You need the Xapian development files in order to compile Zeitgeist")])

        XAPIAN_LIBS=`xapian-config --libs`
        XAPIAN_CXXFLAGS=`xapian-config --cxxflags`
        AC_SUBST([XAPIAN_LIBS])
        AC_SUBST([XAPIAN_CXXFLAGS])
      ])

#################################################
# Configure option: --enable-datahub
#################################################
JSON_GLIB_REQUIRED=0.14.0
GTK_REQUIRED=3.0.0

ZEITGEIST_DATAHUB_REQUIRED="glib-2.0 >= $GLIB_REQUIRED
                            gobject-2.0 >= $GLIB_REQUIRED
                            gio-2.0 >= $GLIB_REQUIRED
                            gio-unix-2.0 >= $GLIB_REQUIRED
                            gtk+-3.0 >= $GTK_REQUIRED
                            json-glib-1.0 >= $JSON_GLIB_REQUIRED"

AC_ARG_ENABLE([datahub],
              AS_HELP_STRING([--enable-datahub], [Whether to build zeitgeist-datahub]),
              [],
              [enable_datahub="yes"])

AM_CONDITIONAL([ENABLE_DATAHUB], [test "$enable_datahub" = "yes"])

#################################################
# Additional provider for datahub
# Configure option: --enable-telepathy
#################################################
TELEPATHY_GLIB_REQUIRED=0.18.0

AC_ARG_ENABLE([telepathy],
              AS_HELP_STRING([--disable-telepathy], [Disables the Telepathy]),
              [],
              [enable_telepathy="yes"])

AS_IF([test "$enable_telepathy" = "yes" -a "$enable_datahub" = "yes"], [
        PKG_CHECK_MODULES([TELEPATHY_GLIB], [telepathy-glib >= $TELEPATHY_GLIB_REQUIRED])
        ZEITGEIST_DATAHUB_REQUIRED="$ZEITGEIST_DATAHUB_REQUIRED telepathy-glib >= $TELEPATHY_GLIB_REQUIRED"
        AC_DEFINE([ENABLE_TELEPATHY], [1], [Is the Telepathy enabled?])
      ], [
        enable_telepathy="no"
      ])

AM_CONDITIONAL([ENABLE_TELEPATHY], [test "$enable_telepathy" = "yes" -a "$enable_datahub" = "yes"])

#################################################
# Additional provider for datahub
# Configure option: --enable-downloads-monitor
#################################################

AC_ARG_ENABLE([downloads-monitor],
              AS_HELP_STRING([--disable-downloads-monitor], [Disables the XDG_DOWNLOAD_DIRECTORY file monitor]),
              [],
              [enable_downloads_monitor="yes"])

AS_IF([test "$enable_downloads_monitor" = "yes" -a "$enable_datahub" = "yes"], [
        AC_DEFINE([DOWNLOADS_MONITOR_ENABLED], [1], [Is the XDG_DOWNLOAD_DIRECTORY file monitor enabled?])
      ], [
        AC_DEFINE([DOWNLOADS_MONITOR_ENABLED], [0], [Is the XDG_DOWNLOAD_DIRECTORY file monitor enabled?])
      ])

AM_CONDITIONAL([DOWNLOADS_MONITOR_ENABLED], [test "$enable_downloads_monitor" = "yes" -a "$enable_datahub" = "yes"])

#################################################
# Configure option: --enable-datahub
#################################################

AS_IF([test "$enable_datahub" = "yes"],
      [
        PKG_CHECK_MODULES(ZEITGEIST_DATAHUB, [$ZEITGEIST_DATAHUB_REQUIRED])
      ])

#################################################
# Libzeitgeist 2.0
#################################################

# Before making a release, the ZEITGEIST_LT_VERSION string should be updated.
# The string is of the form C:R:A.
# - If interfaces have been changed or added, but binary compatibility has
#   been preserved, change to C+1:0:A+1
# - If binary compatibility has been broken (eg removed or changed interfaces)
#   change to C+1:0:0
# - If the interface is the same as the previous version, change to C:R+1:A
LIBZEITGEIST_LT_CURRENT=0
LIBZEITGEIST_LT_REV=0
LIBZEITGEIST_LG_AGE=0
LIBZEITGEIST_LT_VERSION="$LIBZEITGEIST_LT_CURRENT:$LIBZEITGEIST_LT_REV:$LIBZEITGEIST_LT_AGE"
AC_SUBST(LIBZEITGEIST_LT_VERSION)

#################################################
# Docs
#################################################

AC_ARG_ENABLE([docs],
              AS_HELP_STRING([--enable-docs], [Enable documentation generation]),
              [],
              [enable_docs="no"])

found_valadoc=no
AS_IF([test "x$enable_docs" != "xno"], [
  AC_PATH_PROG([VALADOC], [valadoc], [:])
  AS_IF([test -x "$VALADOC"], [
    found_valadoc=yes
    AC_SUBST([VALADOC])
  ], [
    AS_IF([test "x$enable_docs" == "xyes"], [AC_MSG_ERROR([Unable to find valadoc])])
  ])

  AC_PATH_PROG([GTKDOC_SCAN], [gtkdoc-scan], [:])
  AS_IF([test -x "$GTKDOC_SCAN"], [
    found_gtkdoc_scan=yes
    AC_SUBST([GTKDOC_SCAN])
  ], [
    AS_IF([test "x$enable_docs" == "xyes"], [AC_MSG_ERROR([Unable to find gtkdoc-scan])])
  ])
])

AM_CONDITIONAL([ENABLE_DOCS], [test "x$found_valadoc" = "xyes" -a "x$found_gtkdoc_scan" = "xyes"])

GOBJECT_INTROSPECTION_CHECK([1.30])

#################################################
# Ontology parsing dependencies
#################################################

# check for rapper
AC_CHECK_PROG([HAVE_RAPPER], [rapper], [yes], [no])

AS_IF([test "$HAVE_RAPPER" = "no"], [
  AC_MSG_ERROR([You need the tool `rapper' from the `raptor-utils' package in order to compile Zeitgeist])
])

# check for python-rdflib
AM_PATH_PYTHON([2.7])

AC_MSG_CHECKING([for python-rdflib])
AS_IF([$PYTHON -c "import rdflib" 2>/dev/null], [
  AC_MSG_RESULT([yes])
], [
  AC_MSG_FAILURE([failed.  Please install the python-rdflib package.])
])

#################################################
# Summary
#################################################

AC_OUTPUT

cat <<EOF

${PACKAGE}-${VERSION}

  Build environment
    Install Prefix:        ${prefix}

  Optional dependencies
    fts++:                 ${enable_fts}
    dee-icu:               ${have_dee_icu}

  Other build options:
    DataHub:               ${enable_datahub}
      Telepathy provider:  ${enable_telepathy}
    SQL debugging:         ${enable_explain_queries}
    libzeitgeist docs:     ${enable_docs}
    GObject Introspection: ${enable_introspection}

EOF
