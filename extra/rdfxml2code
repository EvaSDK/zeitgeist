#! /usr/bin/python
# -.- coding: utf-8 -.-

# Zeitgeist
#
# Parses an ontology from a .xml file formatted in RDF/XML and outputs a
# loadable Python module representing the ontology
#
# Copyright © 2009-2010 Markus Korn <thekorn@gmx.de>
# Copyright © 2010 Mikkel Kamstrup Erlandsen <mikkel.kamstrup@gmail.com>
# Copyright © 2011 Collabora Ltd.
#             By Siegfried-Angel Gevatter Pujals <siegfried@gevatter.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import rdflib

from rdflib.plugin import register
try:
	# rdflib2
	from rdflib.syntax.serializers import Serializer
	from rdflib import FileInputSource
except ImportError:
	# rdflib3 (LP: #626224)
	from rdflib.serializer import Serializer
	from rdflib.parser import FileInputSource

register('python', Serializer, 'OntologySerializer', 'PythonSerializer')
register('vala', Serializer, 'OntologySerializer', 'ValaSerializer')

def parse(trig_stream):
	"""
	Return a list of triples representing the ontology
	"""
	trig_in = FileInputSource(trig_stream)
	ontology = rdflib.ConjunctiveGraph()
	ontology.parse(trig_in)
	#pycode = ontology.serialize(format="python")
	#print pycode
	valacode = ontology.serialize(format="vala")
	print valacode

if __name__ == "__main__":
	import sys, os
	
	# On no args, read from stdin
	if len(sys.argv) <= 1:
		print >> sys.stderr, "Parsing from stdin"
		parse(sys.stdin)
	else:
		for trig_filename in sys.argv[1:]:
			print >> sys.stderr, "Parsing " + trig_filename
			parse(file(trig_filename))
