#! /usr/bin/python

#
# Parses an ontology from a .xml file formatted in RDF/XML and outputs a
# loadable Python module representing the ontology
#

# API docs for rdflib on http://www.rdflib.net/rdflib-2.4.0/html/index.html
import rdflib
import commands

from rdflib.plugin import register
try:
	#rdflib2
	from rdflib.syntax.serializers import Serializer
	from rdflib import FileInputSource
except ImportError:
	#rdflib3 (LP: #626224)
	from rdflib.serializer import Serializer
	from rdflib.parser import FileInputSource

register('python', Serializer,
         'ValaSerializer', 'ValaSerializer')

def parse(trig_stream, root_dict):
	"""
	Return a list of triples representing the ontology
	"""
	trig_in = FileInputSource(trig_stream)
	ontology = rdflib.ConjunctiveGraph()
	ontology.parse(trig_in)
	valacode = ontology.serialize(format="python", root_dict=root_dict)
	return valacode

if __name__ == "__main__":
	import sys, os
	
	root_dict = {"Interpretation":[], "Manifestation":[]}
	output = "namespace Zeitgeist\n{\n"
	xml_output = ""
	# On no args, read from stdin
	if len(sys.argv) <= 1:
		print "No path to trig files given"
	else:
		path = sys.argv[1]
		dirList=os.listdir(sys.argv[1])
		for trig_filename in dirList:
			if trig_filename.endswith(".trig"):
				print >> sys.stderr, "Parsing " + path + trig_filename
				xml = commands.getoutput("rapper -i trig -o rdfxml " + path + trig_filename)
				f = open("/tmp/trig", "w")
				f.write(xml)
				f.close()
			output = output + parse(file("/tmp/trig"), root_dict)
	output = output + "}"
	print output


